{
	"info": {
		"_postman_id": "f1f1af41-4403-4c6e-be6c-757b3a7d00dd",
		"name": "HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) необходимо залогиниться\r",
							"// POST\r",
							"// http://162.55.220.72:5005/login\r",
							"// login : str (кроме /)\r",
							"// password : str\r",
							"\r",
							"// Приходящий токен необходимо передать во все остальные запросы.\r",
							"\r",
							"// ===================\r",
							"// дальше все запросы требуют наличие токена.\r",
							"\r",
							"let responseData = pm.response.json()\r",
							"    pm.environment.set(\"token\", responseData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Vasily",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// resp.\r",
							"// {'start_qa_salary':salary,\r",
							"//  'qa_salary_after_6_months': salary * 2,\r",
							"//  'qa_salary_after_12_months': salary * 2.9,\r",
							"//  'person': {'u_name':[user_name, salary, age],\r",
							"//                                 'u_age':age,\r",
							"//                                 'u_salary_1.5_year': salary * 4}\r",
							"//                                 }\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"// 2) Проверка структуры json в ответе.\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"let schema = {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"person\" :{\r",
							"                \"type\" : \"object\",\r",
							"                \"properties\":{\r",
							"                    \"u_age\":{\"type\" : \"integer\"},\r",
							"                    \"u_name\":{\"type\" : \"array\",\r",
							"                        \"items\":[\r",
							"                         {\"type\" : \"string\"},\r",
							"                         {\"type\" : \"integer\"},\r",
							"                         {\"type\" : \"integer\"}\r",
							"                         ]\r",
							"                    },\r",
							"                    \"u_salary_1_5_year\":{\"type\" : \"integer\"},\r",
							"                },\r",
							"                 \"additionalProperties\": false, \r",
							"                \"required\" : [\r",
							"                    \"u_age\",\r",
							"                    \"u_name\",\r",
							"                    \"u_salary_1_5_year\"\r",
							"                ]\r",
							"            },\r",
							"            \"qa_salary_after_12_months\":{\"type\" : \"number\"},\r",
							"            \"qa_salary_after_6_months\":{\"type\" : \"integer\"},\r",
							"            \"start_qa_salary\":{\"type\" :\"integer\"},\r",
							"        },\r",
							"        \"required\" : [\r",
							"            \"person\",\r",
							"            \"qa_salary_after_12_months\",\r",
							"            \"qa_salary_after_6_months\",\r",
							"            \"start_qa_salary\"\r",
							"        ]    \r",
							"}\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"}) \r",
							"\r",
							"let responseData = pm.response.json();\r",
							"let requestData = JSON.parse(request.data);\r",
							"\r",
							"pm.test(\"Salary multiplication\", function () {\r",
							"    pm.expect((requestData.salary)*4).to.eql(responseData.person.u_salary_1_5_year);\r",
							"\r",
							"    pm.expect((requestData.salary)*2.9).to.eql(responseData.qa_salary_after_12_months);\r",
							"\r",
							"    pm.expect((requestData.salary)*2).to.eql(responseData.qa_salary_after_6_months);\r",
							"});\r",
							"\r",
							"//передаем salary 1.5 year в окружение. Для get_test_user\r",
							"pm.environment.set(\"salaryUser\", responseData.person.u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": {{age}},\r\n    \"salary\": 500,\r\n    \"name\": \"{{name}}\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Resp.\r",
							"// {'name':name,\r",
							"//   'age': int(age),\r",
							"//   'salary': [salary, str(salary*2), str(salary*3)]}\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"// 2) Проверка структуры json в ответе.\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"\r",
							" pm.test(\"Status code is 200\", function () {\r",
							"     pm.response.to.have.status(200);\r",
							"     });\r",
							"\r",
							"let schema = {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"age\":{\"type\" : \"integer\"},\r",
							"            \"name\":{\"type\" : \"string\"},\r",
							"            \"salary\":{\"type\" : \"array\",\r",
							"                        \"items\":[\r",
							"                         {\"type\" : \"integer\"},\r",
							"                         {\"type\" : \"string\"},\r",
							"                         {\"type\" : \"string\"},\r",
							"                        ]\r",
							"                    }\r",
							"        },\r",
							"        \"additionalProperties\": false,\r",
							"        \"required\" : [\r",
							"            \"age\",\r",
							"            \"name\",\r",
							"            \"salary\"\r",
							"        ]    \r",
							"}\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"}) \r",
							"\r",
							"let responseData = pm.response.json();\r",
							"let requestData = request.data;\r",
							"\r",
							" pm.test(\"Salary multiplication\", function () {\r",
							"     pm.expect((requestData.salary)*2).to.eql(+responseData.salary[1]);\r",
							"     pm.expect((requestData.salary)*3).to.eql(+responseData.salary[2]);\r",
							" });\r",
							"\r",
							" pm.test(\"Array values comparison\", function() {\r",
							"     pm.expect(+responseData.salary[2]).to.be.above(+responseData.salary[0]);\r",
							"     pm.expect(+responseData.salary[2]).to.be.above(+responseData.salary[1]);\r",
							" })"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Resp.\r",
							"// {'name': name,\r",
							"//  'age': age,\r",
							"//  'daily_food':weight * 0.012,\r",
							"//  'daily_sleep': weight * 2.5}\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"// 2) Проверка структуры json в ответе.\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"\r",
							" pm.test(\"Status code is 200\", function () {\r",
							"     pm.response.to.have.status(200);\r",
							"     });\r",
							"\r",
							"let schema = {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"age\":{\"type\" : \"integer\"},\r",
							"            \"daily_food\":{\"type\" : \"number\"},\r",
							"            \"daily_sleep\":{\"type\" : \"number\"},\r",
							"            \"name\":{\"type\" :\"string\"},\r",
							"        },\r",
							"        \"additionalProperties\": false, \r",
							"        \"required\" : [\r",
							"            \"age\",\r",
							"            \"daily_food\",\r",
							"            \"daily_sleep\",\r",
							"            \"name\"\r",
							"        ],\r",
							"    };\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"    }) \r",
							"\r",
							"let responseData = pm.response.json();\r",
							"let requestData = request.data;\r",
							"\r",
							"\r",
							"pm.test(\"Weight multiplication\", function () {\r",
							"    pm.expect((requestData.weight)*0.012).to.eql(responseData.daily_food);\r",
							"    pm.expect((requestData.weight)*2.5).to.eql(responseData.daily_sleep);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "90",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Resp.\r",
							"// {'name': name,\r",
							"//  'age':age,\r",
							"//  'salary': salary,\r",
							"//  'family':{'children':[['Alex', 24],['Kate', 12]],\r",
							"//  'u_salary_1.5_year': salary * 4}\r",
							"//   }\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"// 2) Проверка структуры json в ответе.\r",
							"// 3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"let schema = {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"name\":{\"type\" : \"string\"},\r",
							"            \"age\":{\"type\" : \"integer\"},\r",
							"            \"salary\":{\"type\" : \"integer\"},\r",
							"\r",
							"            \"family\":{\"type\" : \"object\",\r",
							"                 \"properties\":{\r",
							"                     \"children\":{\"type\" : \"array\",\r",
							"                        \"items\":[\r",
							"                            {\"type\" : \"array\",\r",
							"                                \"items\":[\r",
							"                                    {\"enum\" : [\"Alex\"]},\r",
							"                                    {\"enum\" : [24]}\r",
							"                                ]\r",
							"                            },\r",
							"                            {\"type\" : \"array\",\r",
							"                                \"items\":[\r",
							"                                    {\"enum\" : [\"Kate\"]},\r",
							"                                    {\"enum\" : [12]}\r",
							"                                ]\r",
							"                            }\r",
							"\r",
							"                                ]\r",
							"                              },\r",
							"                        \"u_salary_1_5_year\":{\"type\" : \"integer\"},\r",
							"                    },\r",
							"                    \"additionalProperties\": false,\r",
							"                    \"required\" : [\r",
							"                        \"children\",\r",
							"                        \"u_salary_1_5_year\"\r",
							"                    ],\r",
							"            }\r",
							"        },\r",
							"        \"required\" : [\r",
							"            \"name\",\r",
							"            \"age\",\r",
							"            \"salary\",\r",
							"            \"family\"\r",
							"        ]    \r",
							"}\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"    }) \r",
							"\r",
							"\r",
							"let responseData = pm.response.json();\r",
							"let requestData = request.data;\r",
							"\r",
							"pm.test(\"Environment (name) = Response (name)\", function () {\r",
							"    pm.expect(pm.environment.get(\"name\")).to.eql(responseData.name);\r",
							"    });\r",
							"\r",
							"pm.test(\"Request (age) = Response (age)\", function () {\r",
							"    pm.expect(requestData.age).to.eql(responseData.age);\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salaryUser}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Resp. Передаётся список массив объектов.\r",
							"// [\r",
							"// {\"Cur_Abbreviation\": str,\r",
							"//  \"Cur_ID\": int,\r",
							"//  \"Cur_Name\": str\r",
							"// }\r",
							"// …\r",
							"// {\"Cur_Abbreviation\": str,\r",
							"//  \"Cur_ID\": int,\r",
							"//  \"Cur_Name\": str\r",
							"// }\r",
							"// ]\r",
							"\r",
							"// Тесты:\r",
							"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"\r",
							"let responseData = pm.response.json();\r",
							"//передаем случайный Cur_ID в окружение. Для curr_byn\r",
							"let random = Math.floor(Math.random() * (responseData.length)) + 1;\r",
							"    let curId = responseData[random];\r",
							"    pm.environment.set(\"cur\", curId.Cur_ID);\r",
							"    pm.environment.set(\"random\", random)\r",
							"\r",
							"\r",
							"\r",
							"// 1) получить список валют\r",
							"// 2) итерировать список валют\r",
							"// 3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"// 4) если возвращается 500 код, переходим к следующей итреации\r",
							"// 5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"// 6) если поле есть, пишем в консоль инфу про фалюту в виде response\r",
							"// {\r",
							"//     \"Cur_Abbreviation\": str\r",
							"//     \"Cur_ID\": int,\r",
							"//     \"Cur_Name\": str,\r",
							"//     \"Cur_OfficialRate\": float,\r",
							"//     \"Cur_Scale\": int,\r",
							"//     \"Date\": str\r",
							"// }\r",
							"// 7) переходим к следующей итерации\r",
							"\r",
							"let currencyResponse = pm.response.json();\r",
							"let arr = [];\r",
							"m = 0;\r",
							"for (let len = currencyResponse.length; len !=0; len-- ) {\r",
							"            let arrayLine = (currencyResponse.length) - len;\r",
							"// получаем Cur_ID\r",
							"               let currencyID = (currencyResponse[arrayLine].Cur_ID); \r",
							"// отправляем Cur_ID в curr_byn\r",
							"                pm.sendRequest({\r",
							"                    url: pm.environment.get(\"url\") + 'curr_byn',\r",
							"                    method: 'POST',\r",
							"                    body: {\r",
							"                    mode: 'urlencoded',\r",
							"                    urlencoded: [\r",
							"                        {key: \"auth_token\", value: pm.environment.get(\"token\")},\r",
							"                        {key: \"curr_code\", value: currencyID},\r",
							"                        ]\r",
							"                    }\r",
							"                },\r",
							"                    function (err, res) {\r",
							"// проверяем status code и наличие Cur_OfficialRate\r",
							"                        if (res.code === 200 && (typeof (res.json().Cur_OfficialRate) !== 'undefined')) {\r",
							"                            arr.push(res.json());\r",
							"                        }\r",
							"\r",
							"                        m++;\r",
							"// добавлем валюты в массив, упорядоченные по Cur_ID\r",
							"                        if (m === currencyResponse.length) {\r",
							"                            pm.test(\"Check console\", function () {\r",
							"                                arr.sort(function(a,b) {\r",
							"                                    if (a.Cur_ID > b.Cur_ID) {\r",
							"                                        return 1;\r",
							"                                    }\r",
							"                                    if (a.Cur_ID < b.Cur_ID){\r",
							"                                        return -1\r",
							"                                    }\r",
							"                                })\r",
							"                                console.log(\"Список валют с курсом\")\r",
							"                                console.log(arr);}) \r",
							"                         }  \r",
							"                    }                   \r",
							"                )  \r",
							"            }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn ***",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Resp.\r",
							"// {\r",
							"//     \"Cur_Abbreviation\": str\r",
							"//     \"Cur_ID\": int,\r",
							"//     \"Cur_Name\": str,\r",
							"//     \"Cur_OfficialRate\": float,\r",
							"//     \"Cur_Scale\": int,\r",
							"//     \"Date\": str\r",
							"// }\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"// 2) Проверка структуры json в ответе.\r",
							"\r",
							" pm.test(\"Status code is 200\", function () {\r",
							"     pm.response.to.have.status(200);\r",
							"  });\r",
							"  \r",
							"let schema = {\r",
							"         \"type\": \"object\",\r",
							"         \"properties\": {\r",
							"             \"Cur_Abbreviation\":{\"type\" : \"string\"},\r",
							"             \"Cur_ID\":{\"type\" : \"integer\"},\r",
							"             \"Cur_Name\":{\"type\" :\"string\"},\r",
							"             \"Cur_OfficialRate\":{\"type\" : \"number\" },\r",
							"             \"Cur_Scale\":{\"type\" : \"integer\" },\r",
							"             \"Date\":{\"type\" : \"string\" }\r",
							"         },\r",
							"         \"additionalProperties\": false,\r",
							"         \"required\" : [\r",
							"             \"Cur_Abbreviation\",\r",
							"             \"Cur_ID\",\r",
							"            \"Cur_Name\",\r",
							"            \"Cur_OfficialRate\",\r",
							"             \"Cur_Scale\",\r",
							"             \"Date\"\r",
							"         ]    \r",
							" }\r",
							" pm.test(\"Schema\", function () {\r",
							"     pm.response.to.have.jsonSchema(schema);\r",
							"    }) \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{curByn}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "curr_code",
							"value": "468",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}curr_byn",
					"host": [
						"{{url}}curr_byn"
					]
				}
			},
			"response": []
		}
	]
}
